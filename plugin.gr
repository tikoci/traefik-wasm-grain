/**
 * Experimental Traefik plugin using WASM and Grain.  
 * This is the "main" code for the plugin, and where any operations can be preformed on HTTP requests or responses. 
 * Examples here include using Grain's [Pattern Matching](https://grain-lang.org/docs/guide/pattern_matching) on requests to take some actions.
 *
 * > Traefik invokes a WASM plugin by call `handle_request` and `handle_response` exports. 
 * > Since these require unsafe pointers, `HttpWasm` module wraps them.  So Grain-based "callbacks" can use `registerRequestHandler` or `registerResponseHandler` to avoid needing unsafe code.   
 * > But for Traefik's [http-wasm](https://http-wasm.io/) host to find them, the `plugin.gr` must expose these, which just uses the implemention in `WasmHttp` to call any registered handlers here.
 */

module TraefikGrainPlugin

// include grain-lang http-wasm implementation/wrappers
from "./http-wasm.gr" include HttpWasm
// required: low-level handler must be "provide" from "main" WASM module (`plugin.wasm`) to be found
use HttpWasm.*
provide { handle_request, handle_response }

from "list" include List
from "map" include Map
from "string" include String
from "json" include Json

// sample "request handler" in grain
registerRequestHandler((req: Request) => {
  // this use Grain's pattern match to "do stuff" with a HTTP request
  match (req) {

    { method, path, _ } when method == "GET" && path == "/" =>
      log(Debug, "hey, that's the home page"),
    
    { method, _, headers, _} when method == "GET" || method =="POST" => {
      addHeaderValue(ResponseHeader, "X-Traefik-Plugin", "TraefikGrainPlugin")
      log(Info, String.concat("add response X-Traefik-Plugin header to mark processing: ", getHeaderValues(ResponseHeader, "X-Traefik-Plugin")))
      },
    
    { _, _, _, sourceAddr, _ } => 
      log(Debug, String.concat("request coming from: ", sourceAddr)),
    
    { _, _, _, _, protocolVersion } =>
      log(Debug, String.concat("using: ", protocolVersion)),
    
    _ => log(Info, "you're no match"),
  
  }  
  // ALL request handlers must return true to continue processing pipeline
  true // false mean stop processing the ENTIRE request, not just this plugin
})


// response can be trapped, less usefule and more rules apply on what's allowed
registerResponseHandler((resp: Response) => {
  log(Info, "grain says goodbye")
  void
})
