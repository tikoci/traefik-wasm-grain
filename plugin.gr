/**
 * Experimental Traefik plugin using WASM and Grain.  
 * This is the "main" code for the plugin, and where any operations can be preformed on HTTP requests or responses. 
 * Examples here include using Grain's [Pattern Matching](https://grain-lang.org/docs/guide/pattern_matching) on requests to take some actions.
 *
 * > Traefik invokes a WASM plugin by call `handle_request` and `handle_response` exports. 
 * > Since these require unsafe pointers, `HttpWasm` module wraps them.  So Grain-based "callbacks" can use `registerRequestHandler` or `registerResponseHandler` to avoid needing unsafe code.   
 * > But for Traefik's [http-wasm](https://http-wasm.io/) host to find them, the `plugin.gr` must expose these, which just uses the implemention in `WasmHttp` to call any registered handlers here.
 */
module TraefikGrainPlugin

// include grain-lang http-wasm implementation/wrappers
from "./http-wasm.gr" include HttpWasm
// required: low-level handler must be "provide" from "main" WASM module (`plugin.wasm`) to be found
use HttpWasm.*
provide { handle_request, handle_response }

from "list" include List
from "map" include Map
from "string" include String
from "json" include Json

// Sample "request_handler"'s in Grain
// - Request is shaped: { method, path, headers, sourceAddr, protocolVersion }
// - HttpWasm has operations like `log`, `setHeaderValue`, etc as actions
registerRequestHandler((req: Request) => {

  // could be simple, like mark all requests process with a header
  addHeaderValue(ResponseHeader, "X-Traefik-Plugin", "TraefikGrainPlugin")

  // or using Grain's pattern matching with a HTTP request
  match (req) {
    { method, path, _ } when method == "GET" && path == "/" =>
      log(Debug, "tell home page grain says hi"),
    { method, path, _ } => void, // do nothing is "void", required because of "when" clause
  }

  // only one winner in a "match"...
  //  so multuple pattern matchers can be used
  match (req) {
    { method, sourceAddr, protocolVersion, _ } =>
      log(
        Info,
        method ++ " from " ++ sourceAddr ++ " using " ++ protocolVersion
      ),
  }

  // ALL request handlers MUST return true to continue processing pipeline
  // with false meaning stop processing the ENTIRE request, not just this plugin
  // i.e. we're middleware so our choice is to continue or stop
  true
})

// "middleware" need some config to do useful stuff...



// response can be trapped, less usefule and more rules apply on what's allowed
registerResponseHandler((resp: Response) => {
  log(Info, "grain says goodbye")
  void
})
